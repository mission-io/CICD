- hosts: {{HOSTS}}
  remote_user: root
  gather_facts: False

  pre_tasks:
  - debug: msg="Ansible is working in control machine"
  - name: Client machine connectivity check by Ping
    win_ping:

  tasks:

  # PROXY Server Deployment

  - name: Install NGINX
    win_chocolatey:
      name: nginx
      version: '1.12.1'
      state: present
  
  - name: Install nssm
    win_chocolatey:
      name: nssm
      state: present

  - name: Copy NGINX conf file
    win_template: 
      src: nginx.conf.tpl
      dest: C:\ProgramData\chocolatey\lib\nginx\tools\nginx-1.12.1\conf\nginx.conf

  # Certificate (.pem & .key ) files copy to target machine
  
  - name: Copy Cert file 1
    win_template: 
      src: ../cert.pem
      dest: C:\ProgramData\chocolatey\lib\nginx\tools\nginx-1.12.1\conf\cert.pem

  - name: Copy Cert file 2
    win_template: 
      src: ../cert.key
      dest: C:\ProgramData\chocolatey\lib\nginx\tools\nginx-1.12.1\conf\cert.key

  - name: Create Log Folder
    win_file:
      path: C:\nginx
      state: directory

  - name: Install nginx as service
    win_nssm:
      name: nginx
      application: C:\ProgramData\chocolatey\lib\nginx\tools\nginx-1.12.1\nginx.exe
      app_parameters_free_form: -c C:\ProgramData\chocolatey\lib\nginx\tools\nginx-1.12.1\conf\nginx.conf -p C:\ProgramData\chocolatey\lib\nginx\tools\nginx-1.12.1
      stdout_file: C:\nginx\nginx_out.txt
      stderr_file: C:\nginx\nginx_error.txt
      start_mode: auto

  - name: Start Nginx
    win_service:
      name: nginx
      start_mode: auto
      state: started

  # - name: FirewallD rules
  #   firewalld:
  #     permanent: true
  #     service: "{{ item }}"
  #     state: enabled
  #   with_items:
  #     - http
  #     - https

  # REST API Deployment

  - name: Remove Spring Boot service
    win_service:
      name: mission-api
      state: absent
    ignore_errors: yes

  - name: Create Application Folder
    win_file:
      path: C:\Mission\App
      state: directory

  - name: Copy API application
    copy: 
      src: /opt/atlassian/pipelines/agent/build/target/mission-app-core-1.0-SNAPSHOT.jar
      dest: C:\Mission\App\mission-app-core-1.0-SNAPSHOT.jar
      directory_mode: yes

  - name: Archive the Config
    archive:
      path: /opt/atlassian/pipelines/agent/build/src/main/resources/config
      dest: ./config.zip
      format: zip
    delegate_to: localhost
    become: false

  - name: Copy zip File to target
    win_copy: 
      src: ./config.zip
      dest: C:\Mission\

  - name: Remove existing Config
    win_file:
      path: C:\Mission\config
      state: absent

  - name: Unarchive
    win_unzip:
      src: C:\Mission\config.zip
      dest: C:\Mission\
      delete_archive: yes  

  # - name: Install Java
  #   win_chocolatey:
  #     name: jdk8
  #     state: present
  #     version: 8.0.191

  - name: Set Java_home
    win_environment:
      state: present
      name: JAVA_HOME
      value: 'C:\Program Files\java\jdk1.8.0_191'
      level: machine

  - name: Add Java to path
    win_path:
      elements:
        - 'C:\Program Files\java\jdk1.8.0_191\bin'

  - name: Install Spring Boot app as Windows service (via nssm)
    win_nssm:
      name: mission-api
      application: C:\Program Files\java\jdk1.8.0_191\bin\java.exe
      app_parameters_free_form: "-jar C:/Mission/App/mission-app-core-1.0-SNAPSHOT.jar"
      state: stopped
  
  - name: Set the Application path for the Spring Boot app to the folder where the needed native libraries reside
    raw: nssm set mission-api AppDirectory C:/Mission/

  - name: Set SPRING_DATASOURCE_URL
    win_environment:
      state: present
      name: SPRING_DATASOURCE_URL
      value: 'jdbc:postgresql://{{dburl}}:{{dbport}}/{{dbname}}'
      level: machine

  - name: Set SPRING_DATASOURCE_USERNAME
    win_environment:
      state: present
      name: SPRING_DATASOURCE_USERNAME
      value: '{{dbusername}}'
      level: machine

  - name: Set SPRING_DATASOURCE_PASSWORD
    win_environment:
      state: present
      name: SPRING_DATASOURCE_PASSWORD
      value: '{{dbpassword}}'
      level: machine

  - name: Set SERVER_PORT
    win_environment:
      state: present
      name: SERVER_PORT
      value: '{{serverport}}'
      level: machine

  - name: Fire up Spring Boot app Windows service
    win_service:
      name: mission-api
      state: restarted

    ###### Smoke test, if app has booted up correctly
  # - name: Wait until our Spring Boot app is up & running
  #   win_uri:
  #     url: "https://{{SUBDOMAIN}}.mission.io/miosvc/actuator/health"
  #     method: GET
  #   register: result
  #   until: result.status_code is defined and result.status_code == 200 
  #   retries: 5
  #   delay: 5
